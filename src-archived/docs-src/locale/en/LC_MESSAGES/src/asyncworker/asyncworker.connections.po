# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, B2W Digital
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-10-09 09:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../src/asyncworker/asyncworker.connections.rst:2
msgid "asyncworker.connections package"
msgstr ""

#: ../../src/asyncworker/asyncworker.connections.rst:5
msgid "Module contents"
msgstr ""

#: asyncworker.connections.AMQPConnection:1
#: asyncworker.connections.SSEConnection:1 of
msgid "Base: :class:`asyncworker.connections.Connection`"
msgstr ""

#: asyncworker.connections.AMQPConnection.Config:1 of
msgid "Base: :class:`object`"
msgstr ""

#: asyncworker.connections.AMQPConnection.register:1 of
msgid "Register a virtual subclass of an ABC."
msgstr ""

#: asyncworker.connections.AMQPConnection.register:3 of
msgid "Returns the subclass, to allow usage as a class decorator."
msgstr ""

#: asyncworker.connections.Connection:1 of
msgid "Base: :class:`pydantic.main.BaseModel`, :class:`abc.ABC`"
msgstr ""

#: asyncworker.connections.Connection:1 of
msgid ""
"Common ancestral for all Connection classes that auto generates a "
"connection name and is responsible for keeping track of new connections "
"on the ConnectionsMapping"
msgstr ""

#: asyncworker.connections.ConnectionsMapping:1 of
msgid ""
"Base: :class:`collections.abc.Mapping`, :class:`typing.Generic`, "
":class:`asyncworker.signals.base.Freezable`"
msgstr ""

#: asyncworker.connections.ConnectionsMapping:1 of
msgid ""
"A mapping (Connection.name->Connection) of all available connections that"
" also keeps a counter for each connection type"
msgstr ""

