# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, B2W Digital
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-08-04 19:10-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.7.0\n"

#: ../../userguide/handlers/http.rst:2
msgid "HTTP"
msgstr ""

#: ../../userguide/handlers/http.rst:5
msgid ""
"Aqui mostraremos como escrever um handler que é estimulado através de "
"requisições HTTP."
msgstr ""

#: ../../userguide/handlers/http.rst:8
msgid ""
"Um handler é simplesmete uma corotina que recebe um request "
"(``aiohttp.web.Request``) e retorna uma response "
"(``aiohttp.web.Response``). Essa corotina passa a ser um handler "
"\"asyncworker\" quando é decorada com ``@app.route()``, onde ``app`` é "
"uma instância de ``asyncworker.App``."
msgstr ""

#: ../../userguide/handlers/http.rst:10
msgid "Vejamos um handler bem simples que apenas retorna ``HTTP 200 OK``."
msgstr ""

#: ../../userguide/handlers/http.rst:19
msgid ""
"Como recebemos um request do aiohttp, podemos fazer o que for preciso "
"para extrair dele as informações que precisarmos. Para mais detalhes, "
"veja a doc do aiohttp: https://docs.aiohttp.org/en/stable/web.html"
msgstr ""

#: ../../userguide/handlers/http.rst:23
msgid "Aplicando decorators customizados a um handler"
msgstr ""

#: ../../userguide/handlers/http.rst:25
msgid ""
"É possível escrever seus próprios decorators e aplicá-los a seus "
"handlers, junto com o decorator ``@app.route``. No entando temos algumas "
"regras:"
msgstr ""

#: ../../userguide/handlers/http.rst:27
msgid ""
"O decorator ``@app.route()`` deve estar sempre no topo da lista de "
"decorators de um handler;"
msgstr ""

#: ../../userguide/handlers/http.rst:28
msgid ""
"Os decorators intermediários devem sempre usar a função "
":py:func:`asyncworker.routes.call_http_handler()` no momento de chamar o "
"objeto que estão decorando;"
msgstr ""

#: ../../userguide/handlers/http.rst:29
msgid "A inner function retornada pelo decorator deve ser uma corotina;"
msgstr ""

#: ../../userguide/handlers/http.rst:30
msgid "A inner function deve receber apenas ``aiohttp.web.Request``;"
msgstr ""

#: ../../userguide/handlers/http.rst:31
msgid "Essa inner function não deve ser decorada com ``@functools.wraps()``."
msgstr ""

#: ../../userguide/handlers/http.rst:34
msgid "Um exemplo simples de decorator:"
msgstr ""

#: ../../userguide/handlers/http.rst:46
msgid ""
"A razão para isso é que o asyncworker permite que um handler receba "
"parametros dinâmicos (mais sobre isso adiante) e a função "
"``call_http_handler()`` é quem tem ciência disso e saberá fazer a "
"resolução correta dos parametros necessários para que o handler seja "
"corretamente chamado."
msgstr ""

#: ../../userguide/handlers/http.rst:48
msgid "Esse decorator poderia ser aplicado a um handler assim:"
msgstr ""

#: ../../userguide/handlers/http.rst:60
msgid "Handlers que recebem mais do que apenas Request"
msgstr ""

#: ../../userguide/handlers/http.rst:62
msgid ""
"O asyncworker (``0.10.1+``) permite que um handler receba quaisquer "
"prametros. Para isso a assinatura do handler deve conter typehints em "
"todos os parametros. Isso faz com que o asyncowker consiga fazer a "
"resolução desses prametros e consiga chamar o handler corretamente."
msgstr ""

#: ../../userguide/handlers/http.rst:64
msgid ""
"Todas as instancias de ``aiohttp.web.Request`` recebem um atributo "
"chamado ``types_registry`` que é do tipo "
":py:class:`asyncworker.types.registry.TypesRegistry`. Para que um "
"parametro possa ser passado a um handler ele deve ser adicionado a esse "
"registry do request."
msgstr ""

#: ../../userguide/handlers/http.rst:66
msgid ""
"Um exemplo de como popular esse registry é através de um decorator "
"aplicado diretamente ao um handler. Vejamos um exemplo:"
msgstr ""

#: ../../userguide/handlers/http.rst:93
msgid ""
"Aqui o decorator ``auth_required()`` é responsável por fazer a "
"autenticação, pegando dados do Request e encontrando um usuário válido. "
"Se um usuário não puder ser encontrado, retorna "
"``HTTPStatus.UNAUTHORIZED``. Se um usuário autenticar com sucesso, apenas"
" adiciona o objeto user (que é do tipo ``User``) no registry que está no "
"request. Isso é o suficiente para que o handler, quando for chamado, "
"receba diretamente esse user já autenticado."
msgstr ""

#~ msgid "Handlers HTTP"
#~ msgstr ""

#~ msgid ""
#~ "Um handler é simplesmete uma corotina"
#~ " que recebe um request "
#~ "(`aiohttp.web.Request`) e retorna uma response"
#~ " (`aiohttp.web.Response`). Essa corotina passa"
#~ " aser um handler asyncworker quando é"
#~ " decorada com `@app.route()`, onde `app`"
#~ " é uma instância de `asyncworker.App`."
#~ msgstr ""

#~ msgid "Vejamos um handler bem simples que apenas retorna `HTTP 200 OK`."
#~ msgstr ""

#~ msgid ""
#~ "Os decorators intermediários devem sempre "
#~ "usar a função "
#~ ":ref:py:`asyncworker.routes.call_http_handler()`"
#~ msgstr ""

#~ msgid ""
#~ "Os decorators intermediários devem sempre "
#~ "usar a função "
#~ ":ref:py:meth:`asyncworker.routes.call_http_handler()`"
#~ msgstr ""

#~ msgid ""
#~ "É possível escrever seus próprios "
#~ "decorators e aplicá-los a seus handlers,"
#~ " junto com o decorator `@app.route`. "
#~ "No entando temos algumas regras:"
#~ msgstr ""

#~ msgid ""
#~ "O decorator `@app.route()` deve estar "
#~ "sempre no topo da list de "
#~ "decorators de um handler;"
#~ msgstr ""

#~ msgid "Seu decorator não deve usar `functools.wraps()`."
#~ msgstr ""

#~ msgid ""
#~ "A razão para isso é que o "
#~ "asyncworker permite que um handler "
#~ "receba parametros dinâmicos (mais sobre "
#~ "isso adiante) e função `call_http_handler()`"
#~ " é quem tem ciência disso e "
#~ "saberá fazer a resolução correta dos "
#~ "parametros necessários para que o "
#~ "handler seja corretamente chamado."
#~ msgstr ""

#~ msgid ""
#~ "O decorator ``@app.route()`` deve estar "
#~ "sempre no topo da list de "
#~ "decorators de um handler;"
#~ msgstr ""

#~ msgid ""
#~ "A razão para isso é que o "
#~ "asyncworker permite que um handler "
#~ "receba parametros dinâmicos (mais sobre "
#~ "isso adiante) e função ``call_http_handler()``"
#~ " é quem tem ciência disso e "
#~ "saberá fazer a resolução correta dos "
#~ "parametros necessários para que o "
#~ "handler seja corretamente chamado."
#~ msgstr ""

#~ msgid ""
#~ "Todas as instancias de ``aiohttp.web.Request``"
#~ " recebem um atributo chamado "
#~ "``types_registry`` que é do tipo "
#~ ":py:class:`asyncwoker.types.registry.TypesRegistry`. Para "
#~ "que um parametro possa ser passado "
#~ "a um handler ele deve ser "
#~ "adicionado a esse registry do request."
#~ msgstr ""

#~ msgid ""
#~ "Um exemplo de como popular esse "
#~ "registry é através de um decorator "
#~ "apllicado diretamente ao um handler. "
#~ "Vejamos um exemplo:"
#~ msgstr ""

#~ msgid ""
#~ "Aqui o decorator `auth_required()` é "
#~ "responsável por fazer a autenticação, "
#~ "pegando dados do Request e encontrando"
#~ " um usuário válido. Se um usuário "
#~ "não puder ser encontrado, retorna "
#~ "``HTTPStatus.UNAUTHORIZED``. Se um usuário "
#~ "autenticar com sucesso, apenas adiciona "
#~ "o objeto user (que é do tipo "
#~ "``User``) no registry que está no "
#~ "request. Isso é o suficiente para "
#~ "que o handler, quando for chamado, "
#~ "já receba diretamente esse user já "
#~ "autenticado."
#~ msgstr ""

#~ msgid ""
#~ "Os decorators intermediários devem sempre "
#~ "usar a função "
#~ ":py:func:`asyncworker.routes.call_http_handler()`"
#~ msgstr ""

#~ msgid "Seu decorator não deve usar ``functools.wraps()``."
#~ msgstr ""

#~ msgid ""
#~ "Um handler é simplesmete uma corotina"
#~ " que recebe um request "
#~ "(``aiohttp.web.Request``) e retorna uma "
#~ "response (``aiohttp.web.Response``). Essa corotina"
#~ " passa aser um handler asyncworker "
#~ "quando é decorada com ``@app.route()``, "
#~ "onde ``app`` é uma instância de "
#~ "``asyncworker.App``."
#~ msgstr ""

#~ msgid "A inner function deve receber apenas `aiohttp.web.Request`;"
#~ msgstr ""

#~ msgid "Esse handler poderia ser aplicado a um handler assim:"
#~ msgstr ""

#~ msgid ""
#~ "Aqui o decorator ``auth_required()`` é "
#~ "responsável por fazer a autenticação, "
#~ "pegando dados do Request e encontrando"
#~ " um usuário válido. Se um usuário "
#~ "não puder ser encontrado, retorna "
#~ "``HTTPStatus.UNAUTHORIZED``. Se um usuário "
#~ "autenticar com sucesso, apenas adiciona "
#~ "o objeto user (que é do tipo "
#~ "``User``) no registry que está no "
#~ "request. Isso é o suficiente para "
#~ "que o handler, quando for chamado, "
#~ "já receba diretamente esse user já "
#~ "autenticado."
#~ msgstr ""

