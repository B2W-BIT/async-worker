# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, B2W Digital
# This file is distributed under the same license as the Asyncworker
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2020.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Asyncworker \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2020-02-22 22:15-0300\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.8.0\n"

#: ../../userguide/handlers/http/doc.rst:4
msgid "Regras para criação de um handler HTTP"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:6
msgid "Todo handler HTTP deve seguir algumas regras:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:8
msgid "Deve sempre ser decorato com :ref:`@app.route() <asyncworker-app-handler>`"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:9
msgid ""
"Deve declarar seus parametros sempre com definição de tipos, pois é assim"
" que o asyncworker saberá passar :ref:`parametros dinâmicos <handler-"
"path-param>` para o handler."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:10
msgid ""
"Um handler pode não receber nenhum parâmetro. Para isso basta a "
"assinatura do handler ser vazia."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:12
msgid ""
"Alguns objetos já são passados so handler, caso estejam presentes em sua "
"assinatura.  Eles são:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:14
msgid "Uma instância de ``aiohttp.web.Request``."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:18
msgid "Parametrização do decorator route() para handlers HTTP"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:20
msgid ""
"Para um handler HTTP deveremos passar os seguintes parametros para o "
"decorator ``route()``:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:22
msgid ""
"Lista de paths que devem estar na Request HTTP para que esse handler seja"
" chamado;"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:23
msgid "``type=RouteTypes.HTTP``"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:24
msgid "``methods`` sendo uma lista de métodos HTTP permitidos para esse handler"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:26
msgid ""
"Parametros no path podem ser definidos cercando com ``{}``, ex: "
"``/users/{user_id}``. Mais delathes em como receber esses valores em seu "
"handler :ref:`aqui <handler-path-param>`."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:30
msgid "ENVs para escolher a porta e o IP onde o server http estará escutando"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:33
msgid ""
"Por padrão, fazemos o binding em ``127.0.0.1``, porta ``8080``, mas isso "
"pode ser alterado com as envvars ``ASYNCWORKER_HTTP_HOST`` e "
"``ASYNCWORKER_HTTP_PORT``, respectivamente."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:38
msgid "Aplicando decorators customizados a um handler HTTP"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:40
msgid ""
"É possível escrever seus próprios decorators e aplicá-los a seus "
"handlers, junto com o decorator ``@app.route``. No entando temos algumas "
"regras:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:42
msgid ""
"O decorator ``@app.route()`` deve estar sempre no topo da lista de "
"decorators de um handler;"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:43
msgid ""
"Os decorators intermediários devem sempre usar a função "
":py:func:`asyncworker.routes.call_http_handler()` no momento de chamar o "
"objeto que estão decorando;"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:44
msgid "A inner function retornada pelo decorator deve ser uma corotina;"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:45
msgid "A inner function deve receber apenas ``aiohttp.web.Request``;"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:46
msgid "Essa inner function não deve ser decorada com ``@functools.wraps()``."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:49
msgid "Um exemplo simples de decorator:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:61
msgid ""
"A razão para isso é que o asyncworker permite que um handler receba "
"parametros dinâmicos (mais sobre isso adiante) e a função "
"``call_http_handler()`` é quem tem ciência disso e saberá fazer a "
"resolução correta dos parametros necessários para que o handler seja "
"corretamente chamado."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:63
msgid "Esse decorator poderia ser aplicado a um handler assim:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:74
msgid "Handlers que são objetos callable"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:78
msgid ""
"É possível também escrever handlers como objetos que são callables, ou "
"seja, possuem o método ``async def __call__()``. Importante notar que a "
"assinatura do método ``__call__()`` segue as mesmas regras da assinatura "
"de uma corotina decorada com o ``@app.route()``."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:80
msgid ""
"Esses handlers são especialmente úteis quando você precisa guardar algum "
"tipo de contexto e não quer fazer isso com variáveis globais no nível do "
"módulo."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:82
msgid "Um exemplo de um handler:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:91
msgid ""
"Importante notar que como estamos lidando com um objeto ele precisará ser"
" instanciado antes de ser usado e isso significa que não vamos poder "
"decorá-lo da mesma forma que decoramos handlers que são apenas uma "
"corotina. Um código desse gera erro de sintaxe:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:104
msgid ""
"Por isso esses handlers precisam ser registrados chamando o decorator "
"manualmente, assim:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:118
msgid "Handlers que recebem mais do que apenas Request"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:122
msgid ""
"O asyncworker permite que um handler receba quaisquer prametros. Para "
"isso a assinatura do handler deve conter typehints em todos os "
"parametros. Isso faz com que o asyncowker consiga fazer a resolução "
"desses prametros e consiga chamar o handler corretamente."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:124
msgid ""
"Todas as instancias de ``aiohttp.web.Request`` recebem um atributo "
"chamado ``types_registry`` que é do tipo "
":py:class:`asyncworker.types.registry.TypesRegistry`. Para que um "
"parametro possa ser passado a um handler ele deve ser adicionado a esse "
"registry do request."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:126
msgid ""
"Um exemplo de como popular esse registry é através de um decorator "
"aplicado diretamente ao um handler. Vejamos um exemplo:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:153
msgid ""
"Aqui o decorator ``auth_required()`` é responsável por fazer a "
"autenticação, pegando dados do Request e encontrando um usuário válido. "
"Se um usuário não puder ser encontrado, retorna "
"``HTTPStatus.UNAUTHORIZED``. Se um usuário autenticar com sucesso, apenas"
" adiciona o objeto user (que é do tipo ``User``) no registry que está no "
"request. Isso é o suficiente para que o handler, quando for chamado, "
"receba diretamente esse user já autenticado."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:158
msgid "Recebendo parâmetros vindos do path do Request"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:163
msgid ""
"É possível receber em seu handler parametros definidos no path da "
"requisição. Isso é feito través do decorator "
":py:func:`asyncworker.http.decorators.parse_path`."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:165
msgid ""
"Quando decoramos nosso handler com esse decorator instruímos o "
"asyncworker a tentar extrair parametros do path e passar para nosso "
"handler."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:167
msgid ""
"Importante notar que, primeiro o asyncworker vai procurar nosso parametro"
" pelo nome e só depois tentará procurar o tipo.  Exemplo:"
msgstr ""

#: ../../userguide/handlers/http/doc.rst:176
msgid ""
"Nesse caso, como handler está dizendo que precisa de um parametro chamado"
" ``_id`` temos que declarar um parametro de mesmo nome no path da "
"Request. Depois que esse `match` for feito passaremos o valor recebido no"
" path para o construtor do tipo definido na assinatura do handler."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:178
msgid ""
"Então nesse caso faremos um simples ``int(<valor>)``. Esse resultado será"
" passado ao handler no parametro ``_id``, no momento da chamada."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:180
msgid ""
"Importante notar que só serão passados ao handler os parametros que estão"
" definidos na assinatura. Então se seu path recebe dois parametros e seu "
"handler só se interessa por um deles, basta declarar na assinatura do "
"handler o parametro que você quer receber."
msgstr ""

#: ../../userguide/handlers/http/doc.rst:183
msgid ""
"Essa implementação ainda é experimental e servirá de fundação para uma "
"implementação mais complexa, talvez com tipos mais complexos e sem a "
"necessidade de passar o decorator explicitamente."
msgstr ""

#~ msgid "HTTP"
#~ msgstr ""

#~ msgid "Handler HTTP"
#~ msgstr ""

#~ msgid ""
#~ "Aqui mostraremos como escrever um "
#~ "handler que é estimulado através de "
#~ "requisições HTTP."
#~ msgstr ""

#~ msgid ""
#~ "Um handler é simplesmete uma corotina"
#~ " que recebe um request "
#~ "(``aiohttp.web.Request``) e retorna uma "
#~ "response (``aiohttp.web.Response``). Essa corotina"
#~ " passa a ser um handler "
#~ "\"asyncworker\" quando é decorada com "
#~ "``@app.route()``, onde ``app`` é uma "
#~ "instância de ``asyncworker.App``."
#~ msgstr ""

#~ msgid "Vejamos um handler bem simples que apenas retorna ``HTTP 200 OK``."
#~ msgstr ""

#~ msgid ""
#~ "Como recebemos um request do aiohttp,"
#~ " podemos fazer o que for preciso "
#~ "para extrair dele as informações que "
#~ "precisarmos. Para mais detalhes, veja a"
#~ " doc do aiohttp: "
#~ "https://docs.aiohttp.org/en/stable/web.html"
#~ msgstr ""

#~ msgid "Recbendo parametros vindos do path do Request"
#~ msgstr ""

#~ msgid ""
#~ "É possível receber emm seu handler "
#~ "parametros definidos no path da "
#~ "requisição. Isso é feito través do "
#~ "decorator :py:func:`asyncworker.http.decorators.parse_path`."
#~ msgstr ""

#~ msgid ""
#~ "Então nesse caso faremos um simples "
#~ "``int(<valor>)``. Esse resultado será passado"
#~ " ao handler no momento da chamada."
#~ msgstr ""

#~ msgid ""
#~ "Parametros no path podem ser definidos"
#~ " cercando com ``{}``, ex: "
#~ "``/users/{user_id}``. Mais delathes em como"
#~ " receber esses valores em seu handler"
#~ " :ref:`aqui <handler-path-param>`"
#~ msgstr ""

